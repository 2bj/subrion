<?php
//##copyright##

if (!ini_get('safe_mode'))
{
	set_time_limit(180);
}

$iaDbControl = $iaCore->factory('dbcontrol', iaCore::ADMIN);

if (iaView::REQUEST_JSON == $iaView->getRequestType())
{
	$action = isset($iaCore->requestPath[0]) ? $iaCore->requestPath[0] : 'sql';

	switch ($action)
	{
		case 'sql':
			if (isset($_GET['action']) && 'fields' == $_GET['action'] && !empty($_GET['table']))
			{
				if ($fields = $iaCore->iaDb->describe($_GET['table'], false))
				{
					$array = array();
					foreach ($fields as $key => $value)
					{
						$array[] = $value['Field'];
					}

					$iaView->assign($array);
				}
			}
	}
}

if (iaView::REQUEST_HTML == $iaView->getRequestType())
{
	iaCore::util();
	$iaCache = $iaCore->factory('cache');

	$actions = array('sql', 'export', 'import', 'consistency', 'reset');
	$page = isset($iaCore->requestPath[0]) && in_array($iaCore->requestPath[0], $actions) ? $iaCore->requestPath[0] : $actions[0];

	foreach ($actions as $index => $action)
	{
		if (!$iaAcl->checkAccess($permission . $action))
		{
			unset($adminActions['db_' . $action]);
			unset($actions[$index]);
		}
	}

	$iaView->assign('actions', $adminActions);
	$actions = array_values($actions);

	if (!$iaAcl->checkAccess($permission . $page))
	{
		iaView::accessDenied();
	}

	$resetOptions = array(
		'members' => iaLanguage::get('reset') . ' ' . iaLanguage::get('members')
	);
	$iaCore->startHook('phpAdminDatabaseBeforeAll', array('reset_options' => &$resetOptions));
	$tables = $iaDbControl->getTables();

	$error = false;
	$messages = array();

	switch ($page)
	{
		case 'export':
			$dirname = IA_HOME . $iaCore->get('backup');

			if (!is_writable($dirname))
			{
				$backup_is_not_writeable = iaLanguage::getf('directory_not_writable', array('directory' => $dirname));
			}

			$pageCaption = iaLanguage::get('export');

			if (isset($_POST['export']))
			{
				if (!isset($_POST['tbl']) || empty($_POST['tbl']))
				{
					$error = true;
					$messages[] = iaLanguage::get('export_tables_incorrect');
				}

				if (!$error)
				{
					$out = '#  MySQL COMMON INFORMATION:' . PHP_EOL;
					$out .= '#  MySQL CLIENT INFO: ' . $iaDb->getInfo('client_info') . PHP_EOL;
					$out .= '#  MySQL HOST INFO: ' . $iaDb->getInfo('host_info') . PHP_EOL;
					$out .= '#  MySQL PROTOCOL VERSION: ' . $iaDb->getInfo('proto_info') . PHP_EOL;
					$out .= '#  MySQL SERVER VERSION: ' . $iaDb->getInfo('server_info') . PHP_EOL . PHP_EOL;
					$out .= '#  __MySQL DUMP GENERATED BY INTELLI__ #' . PHP_EOL . PHP_EOL . PHP_EOL;

					$drop = iaUtil::checkPostParam('drop', 0);
					$show_columns = iaUtil::checkPostParam('showcolumns', 0);
					$real_prefix = iaUtil::checkPostParam('real_prefix', 0);

					$sql = '';
					if (isset($_POST['sql_structure']) && empty($_POST['sql_data']))
					{
						if (!empty($_POST['tbl']) && is_array($_POST['tbl']))
						{
							foreach ($_POST['tbl'] as $value)
							{
								$sql .= $iaDbControl->makeStructureBackup($value, $drop, $real_prefix);
							}
						}
						else
						{
							$sql = $iaDbControl->makeDbStructureBackup($drop, $real_prefix);
						}
					}
					elseif (isset($_POST['sql_data']) && empty($_POST['sql_structure']))
					{
						if (!empty($_POST['tbl']) && is_array($_POST['tbl']))
						{
							foreach ($_POST['tbl'] as $value)
							{
								$sql .= $iaDbControl->makeDataBackup($value, $show_columns, $real_prefix);
							}
						}
						else
						{
							$sql = $iaDbControl->makeDbDataBackup($show_columns, $real_prefix);
						}
					}
					elseif (isset($_POST['sql_structure']) && isset($_POST['sql_data']))
					{
						if (!empty($_POST['tbl']) && is_array($_POST['tbl']))
						{
							foreach ($_POST['tbl'] as $value)
							{
								$sql .= $iaDbControl->makeFullBackup($value, $drop, $show_columns, $real_prefix);
							}
						}
						else
						{
							$sql = $iaDbControl->makeDbBackup($drop, $show_columns, $real_prefix);
						}
					}
					$sql = $out . $sql;

					if (isset($_POST['save_file']) && $_POST['save_file'])
					{
						$sqlfile = IA_HOME . $iaCore->get('backup');

						// saves to server
						if ('server' == $_POST['savetype'])
						{
							$sqlfile .= !empty($_POST['tbl']) ? date('Y-m-d') . '-' . $_POST['tbl'][0] . '.sql' : 'db-' . date("Y-m-d") . '.sql';
							if (!$fd = @fopen($sqlfile, 'w'))
							{
								@chmod($sqlfile, 0775);
								$error = true;
								$messages = iaLanguage::getf('cant_open_sql', array('filename' => $sqlfile));
							}
							elseif (fwrite($fd, $sql) === false)
							{
								$error = true;
								$messages = iaLanguage::getf('cant_write_sql', array('filename' => $sqlfile));

								fclose($fd);
							}
							else
							{
								$tbls = '';
								if (!empty($_POST['tbl']))
								{
									$tbls = implode(', ', $_POST['tbl']);
								}
								$messages = iaLanguage::getf('table_dumped', array('table' => $tbls, 'filename' => $sqlfile));

								fclose($fd);
							}
						}
						elseif ('client' == $_POST['savetype'])
						{
							$iaView->set('nodebug', 1);

							$sqlfile = ($_POST['tbl']) ? date(iaDb::DATE_FORMAT) . '-' . $_POST['tbl'][0] . '.sql' : "db_" . date("Y-m-d") . '.sql';

							header('Content-Type: text/plain');
							header('Content-Disposition: attachment; filename="' . $sqlfile . '"');
							echo $sql;
							exit;
						}
					}
					else
					{
						$out_sql = $sql;
					}
				}

				$iaView->setMessages($messages, $error ? iaView::ERROR : iaView::SUCCESS);
			}

			break;

		case 'sql':
			$pageCaption = iaLanguage::get('sql_management');
			if (isset($_SESSION['queries']))
			{
				$iaView->assign('history', $_SESSION['queries']);
			}

			if (isset($_POST['exec_query']))
			{
				if (!defined('IA_NOUTF'))
				{
					iaUTF8::loadUTF8Core();
					iaUTF8::loadUTF8Util('ascii', 'validation', 'bad', 'utf8_to_ascii');
				}

				$queryOut = '';
				$error = false;

				$sqlQuery = $_POST['query'];

				if (!utf8_is_valid($sqlQuery))
				{
					$sqlQuery = utf8_bad_replace($sqlQuery);
				}

				$select = false;

				// check for multiple queries
				$is_multiple_queries = strpos($sqlQuery, ';' . PHP_EOL);
				if ($is_multiple_queries === false)
				{
					$queries = array($sqlQuery);
				}
				else
				{
					$queries = explode(";\r\n", $sqlQuery);
				}

				foreach ($queries as $key => $sqlquery)
				{
					$iaCore->startHook('phpAdminBeforeRunSqlQuery');

					$result = $iaDb->query(trim(str_replace('{prefix}', $iaCore->iaDb->prefix, $sqlquery)));

					$iaCore->startHook('phpAdminAfterRunSqlQuery');

					$numrows = 0;
					if ($result)
					{
						if (!isset($_SESSION['queries']))
						{
							$_SESSION['queries'] = array();
						}

						if (!in_array($sqlquery, $_SESSION['queries']))
						{
							if (count($_SESSION['queries']) >= 5)
							{
								array_shift($_SESSION['queries']);
							}
							$_SESSION['queries'][] = $sqlquery;
						}

						$numrows = $rows = $iaDb->getNumRows($result);
						if ($rows)
						{
							$rows .= ($rows > 1) ? ' rows' : ' row';
							$messages[] = "<b>Query OK:</b> {$rows} selected.";
						}
						else
						{
							$messages[] = '<b>Query OK:</b> ' . $iaDb->getAffected() . ' rows affected.';
						}
					}
					else
					{
						$error = true;
						$messages[] = '<b>Query Failed:</b><br />' . $iaDb->getError();
					}

					if ($numrows)
					{
						// get field names
						$fieldNames = $iaDb->getFieldNames($result);

						$queryOut .= '<table class="table table-hover table-condensed"><thead><tr>';
						$i = 0;
						foreach ($fieldNames as $field)
						{
							$queryOut .= '<th ' . (!$i ? 'class="first"' : '') . '>' . $field->name . '</th>';
							$i++;
						}
						$queryOut .= '</tr></thead><tbody>';

						$numFields = $iaDb->getNumFields($result);
						while ($row = $iaDb->fetchRow($result))
						{
							$queryOut .= '<tr>';
							for ($i = 0; $i < $numFields; $i++)
							{
								$queryOut .= '<td ' . (!$i ? 'class="first"' : '') . '>' . iaSanitize::html($row[$i]) . '</td>';
							}
							$queryOut .= '</tr>';
						}
						$queryOut .= '</tbody></table>';
					}
				}

				$iaView->setMessages($messages, $error ? iaView::ERROR : iaView::SUCCESS);
			}

			break;

		case 'import':
			$pageCaption = iaLanguage::get('import');
			if (isset($_POST['run_update']))
			{
				if ($_FILES)
				{
					$filename = $_FILES['sql_file']['tmp_name'];
				}
				else
				{
					$filename = $_POST['sqlfile'];
				}

				if (!is_file($filename))
				{
					$messages[] = iaLanguage::get('no_file');
					$error = true;
				}
				elseif (!($f = fopen ($filename, 'r')))
				{
					$error = true;
					$messages = iaLanguage::getf('cant_open_sql', array('filename' => $filename));
				}
				else
				{
					$sql = '';
					while ($s = fgets($f, 10240))
					{
						$s = trim($s);

						if ($s)
						{
							if ($s[0] == '#' || $s[0] == '')
							{
								continue;
							}
						}
						else
						{
							continue;
						}

						if ( $s[strlen($s) - 1] == ';' )
						{
							$sql .= $s;
						}
						else
						{
							$sql .= $s;
							continue;
						}
						$iaDb->query(str_replace('{prefix}', $iaCore->iaDb->prefix, $sql));
						$sql = '';
					}
					fclose($f);

					$messages = iaLanguage::get('upgrade_completed');

					$iaCache->clearAll();
				}

				$iaView->setMessages($messages, $error ? iaView::ERROR : iaView::SUCCESS);
			}

			break;

		case 'consistency':
			$pageCaption = iaLanguage::get('consistency');

			if (isset($_GET['type']))
			{
				if ($_GET['type'] == 'optimize')
				{
					$query = 'OPTIMIZE TABLE ';
					foreach ($tables as $t)
					{
						$query .= "`" . $t . "`,";
					}
					$query = rtrim($query, ',');
					$iaDb->query($query);

					$iaView->setMessages(iaLanguage::get('optimize_complete'), iaView::SUCCESS);
					iaUtil::reload(array('type' => null));
				}
				elseif ($_GET['type'] == 'repair')
				{
					$query = 'REPAIR TABLE ';
					foreach ($tables as $t)
					{
						$query .= '`' . $t . '`,';
					}
					$query = rtrim($query, ',');
					$iaDb->query($query);

					$iaView->setMessages(iaLanguage::get('repair_complete'), iaView::SUCCESS);
					iaUtil::reload(array(
						'page' => 'consistency',
						'type' => null
					));
				}

				$iaCore->startHook('phpAdminDatabaseConsistencyType');
			}

			break;

		case 'reset':

			$pageCaption = iaLanguage::get('reset');

			$notifications = array(
				'msg' => iaLanguage::get('reset_backup_alert'),
				'type' => iaView::ALERT
			);

			if (isset($_POST['reset']))
			{
				$options = $_POST['options'];
				if (empty($options))
				{
					$error = true;
					$messages[] = iaLanguage::get('reset_choose_table');
				}

				if (!$error)
				{
					if (in_array('members', $options))
					{
						$iaUsers = $iaCore->factory('users');

						// get current account
						$currentMember = $iaDb->row_bind(iaDb::ALL_COLUMNS_SELECTION, '`id` = :id', array('id' => iaUsers::getIdentity()->id), iaUsers::getTable());

						// truncate members table
						$iaDBControl = $iaCore->factory('dbcontrol', iaCore::ADMIN);
						$iaDBControl->truncate(iaUsers::getTable());

						// insert current member
						$iaDb->insert($currentMember, null, iaUsers::getTable());

						$options = array_diff($options, array($iaUsers->getItemName()));
					}

					if ($options)
					{
						foreach ($options as $option)
						{
							$iaCore->startHook('phpDbControlBeforeReset', array('option' => $option));
						}
					}

					$messages[] = iaLanguage::get('reset_success');
				}

				$iaView->setMessages($messages, ($error ? iaView::ERROR : iaView::SUCCESS));
			}
			break;
	}

	if ($pageCaption)
	{
		iaBreadcrumb::toEnd($pageCaption, IA_SELF);
		$iaView->title($pageCaption);
	}

	if (isset($_POST['exec_query']) && $queryOut)
	{
		$iaView->assign('queryOut', $queryOut);
	}

	if (isset($sqlQuery))
	{
		$iaView->assign('sql_query', $sqlQuery);
	}

	// generate list of available folders for dump files
	$dumpFolders = array(
		'Updates' => IA_HOME . 'updates' . IA_DS
	);
	$packages = $iaDb->onefield('name', "`type` = 'package' AND `status` = 'active'", null, null, 'extras');
	foreach ($packages as $package)
	{
		$dumpFolders[iaLanguage::get($package)] = IA_PACKAGES . $package . IA_DS . 'includes' . IA_DS . 'dumps' . IA_DS;
	}

	// generate list of available dump files
	$dumpFiles = array();
	foreach ($dumpFolders as $name => $path)
	{
		if (is_dir($path))
		{
			$files = scandir($path);
			foreach ($files as $file)
			{
				if (substr($file, 0, 1) != '.' && is_file($path . $file))
				{
					$dumpFiles[$name][] = array(
						'filename' => $path . $file,
						'title' => substr($file, 0, count($file) - 5)
					);
				}
			}
		}
	}
	$iaView->assign('dumpFiles', $dumpFiles);

	if (isset($backup_is_not_writeable))
	{
		$iaView->assign('backup_is_not_writeable', $backup_is_not_writeable);
	}

	if (isset($out_sql))
	{
		$iaView->assign('out_sql', $out_sql);
	}

	if (isset($notifications))
	{
		$iaView->assign('notifications', $notifications);
	}

	$iaView->assign('database_page', $page);
	$iaView->assign('tables', $tables);
	$iaView->assign('reset_options', $resetOptions);

	$iaView->display('database');
}